set ignorecase
" set smartcase
set hidden
set nowrap
set ruler
set grepprg=ack\ -a
set grepformat=%f:%l:%m
set sts=2
set shiftwidth=2
set tabstop=2
" set autoindent
set expandtab
" set number
set hlsearch
set incsearch
set history=1000
set wildmode=list:longest
set scrolloff=5
set lines=50
set columns=140
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set cursorline
set backspace=indent,eol,start
set guicursor=a:blinkon0
if has("gui_running")
  set guioptions=egmrt
  if has("gui_macvim")
    set guifont=Inconsolata:h18.00
  endif
endif
syntax on
filetype on
filetype plugin on
" filetype indent on
highlight CursorLine guibg=#eeeeee
" " au BufWinEnter * let w:m1=matchadd('Search', '\%<81v.\%>77v', -1)
" au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>75v.\+', -1)
" au WinEnter * let w:m2=matchadd('ErrorMsg', '\%>75v.\+', -1)

let NERDTreeIgnore=['\~$', '\.pyc$']

" Functions
function! ToggleScratch()
  if expand('%') == g:ScratchBufferName
    quit
  else
    Sscratch
  endif
endfunction

" remap
let mapleader = ","
map  <silent> <leader>s :call ToggleScratch()<CR>
map  <unique> <silent> <Leader>t <Plug>PeepOpen
map  <silent> <unique> <Leader>cd <Plug>RooterChangeToRootDirectory
map  <silent> <leader>b :FuzzyFinderBuffer<CR>
map  <silent> <C-N> :silent noh<CR>
map  <silent> <leader>n :NERDTreeToggle<CR>
map  <silent> <S-F5> :ruby finder.rescan!<ENTER>
map  <leader>l <C-W>l
map  <leader>j <C-W>j
map  <leader>k <C-W>k
map  <leader>h <C-W>h
map  <F1> <ESC>
imap <F1> <ESC>
nmap <silent> <leader>L :set list!<CR>
vmap gl :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

set pastetoggle=<F2>
" map <leader>t :FuzzyFinderTextMate<CR>

colorscheme ir_black

let g:fuzzy_ceiling="1000"
let g:fuzzy_ignore="log/**;coverage/**;tmp/**;public/images/**;public/system/**;doc/**;script/**;solr/**;public/secure_photos/**;vendor/**;*.pyc"
let g:fuzzy_matching_limit="10"
let g:fuzzy_enumerating_limit="10"

" Django template surround stuff
let g:surround_{char2nr("b")} = "{% block\1 \r..*\r &\1 %}\r{% endblock %}"
let g:surround_{char2nr("i")} = "{% if\1 \r..*\r &\1 %}\r{% endif %}"
let g:surround_{char2nr("w")} = "{% with\1 \r..*\r &\1 %}\r{% endwith %}"
let g:surround_{char2nr("c")} = "{% comment\1 \r..*\r &\1 %}\r{% endcomment %}"
let g:surround_{char2nr("f")} = "{% for\1 \r..*\r &\1 %}\r{% endfor %}"
